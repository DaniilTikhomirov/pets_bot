package com.bot.pets_bot.callback;

import com.bot.pets_bot.mark_ups.MarkUps;
import com.bot.pets_bot.models.entity.TelegramUser;
import com.bot.pets_bot.reactions.ShelterInfoReactions;
import com.bot.pets_bot.services.TelegramUserService;
import com.bot.pets_bot.telegram_utils.MessageProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class ShelterInfoCallBack implements CallBackResponsive{

    private final ShelterInfoReactions shelterInfoReactions;
    private final MessageProvider messageProvider;
    private final TelegramUserService telegramUserService;

    @Value("${my.shelter.id}")
    private long SHELTER_ID;

    public ShelterInfoCallBack(ShelterInfoReactions shelterInfoReactions, MessageProvider messageProvider, TelegramUserService telegramUserService) {
        this.shelterInfoReactions = shelterInfoReactions;
        this.messageProvider = messageProvider;
        this.telegramUserService = telegramUserService;
    }


    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—é—Ç–µ, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
     */
    private final String INFO_ABOUT_SHELTER = """
            <b>–û –Ω–∞—à–µ–º –ø—Ä–∏—é—Ç–µ</b>
            
            –ù–∞—à –ø—Ä–∏—é—Ç ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç –∑–∞–±–æ—Ç—É, –ª—é–±–æ–≤—å –∏ —à–∞–Ω—Å –Ω–∞ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å. üêæ
            –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Å–ø–∞—Å–µ–Ω–∏–µ–º, –ª–µ—á–µ–Ω–∏–µ–º –∏ –ø–æ–∏—Å–∫–æ–º –¥–æ–º–∞ –¥–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
            
            –ö–∞–∂–¥—ã–π –ø–∏—Ç–æ–º–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É –Ω–∞—Å, –æ–∫—Ä—É–∂—ë–Ω –≤–Ω–∏–º–∞–Ω–∏–µ–º –∏ –∑–∞–±–æ—Ç–æ–π.
            –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –¥–æ–±—Ä–µ–µ, –ø–æ–º–æ–≥–∞—è —Ç–µ–º, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–µ–±–µ —Å–∞–º. ‚ù§Ô∏è""";


    @Override
    public void callback(long chatId, int messageId, String[] call_split_data) {
        switch (call_split_data[0]){
            case "infoAboutShelter", "BackToInfoAboutShelterMenu" -> {
                shelterInfoReactions.reactionOnInfoAboutShelter(chatId, messageId, INFO_ABOUT_SHELTER);
            }

            case "generalInformation" -> {
                shelterInfoReactions.reactionOnGeneralInformation(chatId, messageId, SHELTER_ID);
            }

            case "securityPrecautions" -> {
                shelterInfoReactions.reactionOnSecurityPrecautions(chatId, messageId, SHELTER_ID);
            }
            case "backToInfoAboutShelterMenuDel" -> {
                messageProvider.deleteMessage(chatId, messageId);
                messageProvider.putMessageWithMarkUps(chatId, INFO_ABOUT_SHELTER, MarkUps.InfoAboutShelterMenu());
            }

            case "backToMenuDel" -> {
                messageProvider.deleteMessage(chatId, messageId);
                messageProvider.putMessageWithMarkUps(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª",
                        MarkUps.startMenu());
            }

            case "backToMenu" -> {
                messageProvider.changeText(chatId, messageId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª");
                messageProvider.changeInline(chatId, messageId, MarkUps.startMenu());
            }


        }
    }

    public void addContact(long chatId, String phoneNumber){
        messageProvider.putMessageWithMarkUps(chatId, INFO_ABOUT_SHELTER, MarkUps.InfoAboutShelterMenu(),
                true);

        TelegramUser telegramUser = telegramUserService.getTelegramUserByTelegramId(chatId);
        telegramUser.setContact(formatingPhoneNumber(phoneNumber));

        telegramUserService.putTelegramUser(telegramUser);
    }


    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
     * <p>
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–π, –≤ —Ñ–æ—Ä–º–∞—Ç:
     * code-XXX-XXX-XXX.
     * </p>
     *
     * @param phoneNumber –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private String formatingPhoneNumber(String phoneNumber) {
        StringBuilder sb = new StringBuilder();

        sb.append(phoneNumber.charAt(phoneNumber.length() - 1)).append(phoneNumber.charAt(phoneNumber.length() - 2));
        sb.append("-");
        sb.append(phoneNumber.charAt(phoneNumber.length() - 3)).append(phoneNumber.charAt(phoneNumber.length() - 4));
        sb.append("-");
        sb.append(phoneNumber.charAt(phoneNumber.length() - 5)).append(phoneNumber.charAt(phoneNumber.length() - 6)).
                append(phoneNumber.charAt(phoneNumber.length() - 7));
        sb.append("-");
        sb.append(phoneNumber.charAt(phoneNumber.length() - 8)).append(phoneNumber.charAt(phoneNumber.length() - 9)).
                append(phoneNumber.charAt(phoneNumber.length() - 10));
        sb.append("-");

        for (int i = 11; i <= phoneNumber.length(); i++) {
            sb.append(phoneNumber.charAt(phoneNumber.length() - i));
        }

        sb.reverse();
        return sb.toString();
    }
}
